from aiogram import Router, types
from aiogram.filters import Command
from parse_reels import fetch_top_reels_public  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é

router = Router()

@router.message(Command("reels"))
async def get_reels(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reels <username>
    –ü–∞—Ä—Å–∏—Ç –ø—É–±–ª–∏—á–Ω—ã–π Instagram –∞–∫–∫–∞—É–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø Reels.
    """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reels <username>")
        return

    username = args[1]

    await message.answer(f"–ò—â—É Reels —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}‚Ä¶ ‚è≥")

    try:
        followers, reels, is_private = fetch_top_reels_public(username, limit=5, min_ratio=0.01)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        return
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return

    if is_private:
        await message.answer("–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞–∫—Ä—ã—Ç. üîí")
        return

    if not reels:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ Reels, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —É—Å–ª–æ–≤–∏—è.")
        return

    text = f"–ê–∫–∫–∞—É–Ω—Ç {username} | –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {followers}\n\n–¢–æ–ø Reels:\n"
    for i, (url, views, ratio) in enumerate(reels, start=1):
        text += f"{i}. {url} | –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views} | –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {ratio:.2f}\n"

    await message.answer(text)
