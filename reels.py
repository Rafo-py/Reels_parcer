
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from typing import Optional
import re

from config import TOKEN
from parse_reels import fetch_top_reels

router = Router()
router.message.filter(F.chat.type == "private")

bot = Bot(token=TOKEN)

USERNAME_RE = re.compile(r"^[a-zA-Z0-9._]{1,30}$")

@router.message(Command("reels"))
async def cmd_reels(message: Message):
    """
    Usage examples:
      /reels nasa                 -> top 5 reels by virality
      /reels nasa 10              -> top 10
      /reels nasa 10 0.5          -> top 10 with min_ratio 0.5
    """
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ username: <code>/reels username [limit] [min_ratio]</code>", parse_mode=ParseMode.HTML)
        return

    username = parts[1].strip().lstrip("@")
    if not USERNAME_RE.match(username):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username.")
        return

    limit = 5
    min_ratio = 0.0
    if len(parts) >= 3:
        try:
            limit = max(1, min(50, int(parts[2])))
        except:
            pass
    if len(parts) >= 4:
        try:
            min_ratio = max(0.0, float(parts[3]))
        except:
            pass

    waiting = await message.answer("üîé –ò—â—É –≤–∏—Ä—É—Å–Ω—ã–µ Reels‚Ä¶")

    try:
        followers, reels = await _fetch_reels_async(username, limit, min_ratio)
    except Exception as e:
        await waiting.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Reels. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å Instagram –≤ config.py –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not reels:
        await waiting.edit_text("ü§∑‚Äç‚ôÇÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")
        return

    lines = [f"üìä –¢–æ–ø Reels @{username} (–ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers:,})".replace(",", " ")]
    for i, (url, views, ratio) in enumerate(reels, 1):
        lines.append(f"{i}. {url} ‚Äî üëÄ {views:,} ‚Ä¢ ü§© –≤–∏—Ä—É—Å–Ω–æ—Å—Ç—å {ratio:.2f}".replace(",", " "))
    await waiting.edit_text("\n".join(lines))

async def _fetch_reels_async(username: str, limit: int, min_ratio: float):
    # Run blocking instaloader in a thread to avoid blocking event loop
    import asyncio
    loop = asyncio.get_running_loop()
    from functools import partial
    from parse_reels import fetch_top_reels
    return await loop.run_in_executor(None, partial(fetch_top_reels, username, limit, min_ratio))
